#+TITLE: Mark's Emacs Config
#+AUTHOR: Mark Dixon
#+DESCRIPTION: Mark's personal Emacs config.
#+STARTUP: content
#+EXPORT_FILE_NAME: ~/Org/html/config.html
#+OPTIONS: num:nil ^:{}



* ABOUT THIS CONFIG
  Mark's personal Emacs config as a literative / org-moode document. Some useful notes:



* INITIALIZING

Bootstrapping of this config is done in init.el and bootstrap.el - looading
melpa, use-package and some basic stuff.


** Use-package
use-package is a macro that provides convenient syntactic sugar for many
common tasks related to installing and configuring Emacs packages.

#+begin_src emacs-lisp
(straight-use-package 'use-package)
#+end_src



** Keybindings

#+begin_src emacs-lisp

(setq mac-function-modifier 'meta)
(setq mac-command-modifier 'meta)
(setq mac-option-modifier nil)

(global-set-key (kbd "C-z") 'undo)  ; nice to be a bit lazy

#+end_src


** Sane defaults
From old Emacs config - these are the small settings that make a nice difference
to the whole Emacs experience..

#+begin_src emacs-lisp

(setq-default frame-title-format '("%b")) ; Make window title the buffer name
(fset 'yes-or-no-p 'y-or-n-p)             ; y-or-n-p makes answering questions faster
(delete-selection-mode 1)                 ; Selected text will be overwritten when you start typing
(setq use-dialog-box nil)                 ;; Prompts should go in the minibuffer, not in a GUI.
(setq-default indent-tabs-mode nil)       ; never use tabs!
(set-charset-priority 'unicode)           ; prioritise utf-8
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))
(global-auto-revert-mode t)               ; Auto-update buffer if file has changed on disk

#+end_src

#+RESULTS:
: t


This one is important - it adds line wrapping which makes org-mode generally nicer.

#+begin_src emacs-lisp
(global-visual-line-mode t)
#+end_src


** Icons
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.

All-the-icons seems to be the only real icon set being updated for Emacs.

#+begin_src emacs-lisp
(use-package all-the-icons
  :straight t)
#+end_src


** Emojis
Emojify is an Emacs extension to display emojis. It can display github style emojis like :smile: or plain ascii ones like :).

#+Begin_src emacs-lisp
(use-package emojify
  :straight t
  :hook (after-init . global-emojify-mode))
#+end_src





** Spellchecking


#+begin_src emacs-lisp

(setq ispell-program-name "/opt/homebrew/bin/ispell")

(use-package guess-language         ; Automatically detect language for Flyspell
  :ensure t
  :defer t
  :straight t
  :init (add-hook 'org-mode-hook #'guess-language-mode)
  :config
  (setq guess-language-langcodes '((en . ("en_GB" "English"))
                                   (sv . ("sv" "Swedish")))
        guess-language-languages '(en sv)
        guess-language-min-paragraph-length 45)
  :diminish guess-languag
  e-mode)
#+end_src

*** Jinx

#+begin_src emacs-lisp

(use-package jinx
  :ensure t
  :straight t
  :config
  (setq jinx-languages '("en_GB"))
  (global-jinx-mode)
  )

#+end_src

#+RESULTS:
: t



* NANO EMACS

Load Nano-Emacs and Nano-Theme via straight... directly from Github.

#+begin_src emacs-lisp
;; (straight-use-package
;;   '(nano-emacs :type git :host github :repo "rougier/nano-emacs"))

;; (straight-use-package
;;  '(nano-emacs :type git :host github :repo "rougier/nano-emacs"))

(straight-use-package
  '(nano-emacs :type git :host github :repo "rougier/nano-emacs"
               :fork (:host github
                    :repo "wakatara/nano-emacs")))

#+end_src

  
** Nano Layout
This module defines the overall layout of an emacs frame, defining default font, fringes, margins, etc.

#+begin_src emacs-lisp
;; Default layout (optional)
(require 'nano-layout)
#+end_src

** Nano Fonts

#DEPR+begin_src emacs-lisp

(set-face-attribute 'default nil
  :font "Hack Nerd Font"
  :height 150
  :weight 'light)
(set-face-attribute 'variable-pitch nil
  :font "SF Pro Text"
  :height 180
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "Hack Nerd Font"
  :height 150
  :weight 'medium)

;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0)

;; Needed if using emacsclient. Otherwise, your fonts will be smaller than expected.
;;(add-to-list 'default-frame-alist '(font . "Hack-14"))


#+end_src

#+RESULTS:
: SF Pro Text

#+begin_src emacs-lisp
(setq nano-font-family-monospaced "Hack Nerd Font")
(setq nano-font-family-proportional "SF Pro Text")
(setq nano-font-size 16)
#+end_src

#+RESULTS:
: 16

** Nano Theme
This module derives faces for several popular emacs modes from the nano faces.

Currently loading Nord theme before nano theme in order to give nicer colorations
to org-roam.

#+begin_src emacs-lisp
(straight-use-package
    '(nano-theme :type git :host github :repo "rougier/nano-theme"))


;;(require 'nano-theme-dark)
;;(nano-theme-set-dark)
;;(require 'nano-theme)
;;(nano-theme)
;;(nano-light)
;;(nano-dark)

(set-face-attribute 'default nil :family "Fira Code" :weight 'normal :height 160)
;;(set-face-attribute 'default nil :weight 'normal :height 160)

(use-package nano-theme
    :ensure t
    :straight t
    :config
    (custom-set-faces
        '(italic ((t (:inherit nano-salient))))     
        '(org-level-2 ((t (:inherit nano-default))))
        '(org-level-3 ((t (:inherit nano-default))))
        '(org-level-4 ((t (:inherit nano-default))))
        '(org-level-5 ((t (:inherit nano-default))))
        '(org-level-6 ((t (:inherit nano-default))))
        '(org-level-7 ((t (:inherit nano-default))))
        '(org-level-8 ((t (:inherit nano-default))))
        '(org-table ((t (:inherit nano-default)))))
  )
(load-theme 'nano-dark t)



;;(defface nano-mono
;;  '((t (:family "Roboto Mono"
;;        :height 140
;;        :weight light)))
;;  "Default monospaced font (Roboto Mono Light, 14pt)."
;;  :group 'nano-theme-fonts)

;;    (set-face 'org-headline-done                       'nano-face-faded)
;;    (set-face 'org-level-1                            'nano-face-strong)
;;    (set-face 'org-level-2                            'nano-face-strong)
;;    (set-face 'org-level-3                            'nano-face-strong)
;;    (set-face 'org-level-4                            'nano-face-strong)
;;    (set-face 'org-level-5                            'nano-face-strong)
;;    (set-face 'org-level-6                            'nano-face-strong)
;;    (set-face 'org-level-7                            'nano-face-strong)
;;    (set-face 'org-level-8                            'nano-face-strong)
;;    (set-face 'org-upcoming-deadline                 'nano-face-default)


;; Theme
(require 'nano-faces)
(nano-faces)



#+end_src

#+RESULTS:


** Nano Defaults
This modules provides a set of sane default settings for Emacs.

#+begin_src emacs-lisp
;; Nano default settings (optional)
(require 'nano-defaults)

;; Default shell in term
(unless (eq system-type 'windows-nt)
  (setq-default shell-file-name "/usr/local/bin/fish")
  (setq explicit-shell-file-name "/usr/local/bin/fish"))

;; nano-defaults sets windmove default to shift - but this is not nice with org-mode so set it to hyper instead
(windmove-default-keybindings 'hyper)
  #+end_src


** Nano Colors
This module provides a collection of colors palettes (open colors, material colors, nord colors) with functions for easily accessing them.

#+begin_src emacs-lisp
;; Nano colors (optional)
(require 'nano-colors)
#+end_src


** Nano Session
This modules configures Emacs such that a session is saved from one run to the other.

#+begin_src emacs-lisp
;; Nano session saving (optional)
(require 'nano-session)
#+end_src


** Nano Modeline
This module defines a header line that is mode dependent and takes care
of hiding the modeline when necessary.

#+begin_src emacs-lisp
;; Nano header & mode lines (optional)
(require 'nano-modeline)
#+end_src

#+RESULTS:
: nano-modeline


** Nano Splash
This module provides a splash screen when emacs is started.

#+begin_src emacs-lisp
;; Splash (optional)
(unless (member "-no-splash" command-line-args)
    (require 'nano-splash))
#+end_src


** Nano Help
This module provides a function to display a small help message in the
echo area.

#+begin_src emacs-lisp
;; Help (optional)
(unless (member "-no-help" command-line-args)
    (require 'nano-help))
#+end_src

#+RESULTS:
: nano-help

** Nano MU4E
#+begin_src emacs-lisp
;;(use-package svg-tag-mode
;;  :straight t)

;;(straight-use-package
;; '(mu4e-thread-folding :type git :host github :repo "rougier/mu4e-thread-folding"))
;;(straight-use-package
;; '(mu4e-dashboard :type git :host github :repo "rougier/mu4e-dashboard"))


;;(require 'nano-mu4e)
#+end_src

#+RESULTS:
: t



* PROGRAMMING + Tree-Sitter
** Install module

#+begin_src emacs-lisp
(require 'treesit)
#+end_src

#+RESULTS:
: treesit

** Python settings

#+begin_src elisp
(defvar python--treesit-settings
  (treesit-font-lock-rules
   :feature 'comment
   :language 'python
   '((comment) @font-lock-comment-face)

   :feature 'string
   :language 'python
   '((string) @font-lock-string-face
     (string) @contextual) ; Contextual special treatment.

   :feature 'function-name
   :language 'python
   '((function_definition
      name: (identifier) @font-lock-function-name-face))

   :feature 'class-name
   :language 'python
   '((class_definition
      name: (identifier) @font-lock-type-face))

   ))
#+end_src

#+RESULTS:
: python--treesit-settings

#+begin_src emacs-lisp
(set-face-attribute 'font-lock-function-name-face nil :slant 'italic)

#+end_src

#+RESULTS:

#+begin_src elisp
(define-derived-mode python-mode prog-mode "Python"
  (cond
   ;; Tree-sitter.
   ((treesit-ready-p 'python-mode 'python)
    (treesit-parser-create 'python)
    (setq-local treesit-font-lock-settings python--treesit-settings)
    (setq-local treesit-font-lock-feature-list
                '((comment string function-name)
                  (class-name keyword builtin)
                  (string-interpolation decorator)))
    (treesit-major-mode-setup))
   (t
    ;; No tree-sitter
    ;;(setq-local font-lock-defaults ...)
    )))
#+end_src

#+RESULTS:
: python-mode





** VTERM

#+begin_src emacs-lisp
(use-package vterm
  :straight t
  :ensure t)

#+end_src

#+RESULTS:

** Julia REPL

#+begin_src emacs-lisp

(use-package julia-mode
  :straight t
  :ensure t)

(use-package julia-repl
  :straight t
  :ensure t
  :hook (julia-mode . julia-repl-mode)

  :init
  (setenv "JULIA_NUM_THREADS" "8")

  :config
  ;; Set the terminal backend
  (julia-repl-set-terminal-backend 'vterm)
  
  ;; Keybindings for quickly sending code to the REPL
  (define-key julia-repl-mode-map (kbd "<C-RET>") 'my/julia-repl-send-cell)
  (define-key julia-repl-mode-map (kbd "<M-RET>") 'julia-repl-send-line)
  (define-key julia-repl-mode-map (kbd "<S-return>") 'julia-repl-send-buffer))

#+end_src

#+RESULTS:
| julia-repl-mode |

And a function to send code "cells" to the REPL..

#+begin_src emacs-lisp
(defun my/julia-repl-send-cell() 
  ;; "Send the current julia cell (delimited by ###) to the julia shell"
  (interactive)
  (save-excursion (setq cell-begin (if (re-search-backward "^###" nil t) (point) (point-min))))
  (save-excursion (setq cell-end (if (re-search-forward "^###" nil t) (point) (point-max))))
  (set-mark cell-begin)
  (goto-char cell-end)
  (julia-repl-send-region-or-line)
  (next-line))
#+end_src

#+RESULTS:
: my/julia-repl-send-cell


* UTIL PACKAGES

** Smex
Smex is a package the makes M-x remember our history.  Now M-x will show our
last used commands first.

#+begin_src emacs-lisp
;;(straight-use-package 'smex)
(use-package smex
  :straight t)
(smex-initialize)
#+end_src


** WRITEROOM MODE
A minor mode for Emacs that implements a distraction-free writing mode similar to the famous Writeroom editor for OS X.

#+begin_src emacs-lisp
(use-package writeroom-mode
    :config (setq writeroom-width 80)
    :straight t)
#+end_src


  
 

* ORG MODE

#+begin_src emacs-lisp
(use-package org
  :ensure org-contrib
  ;; The rest of your org-mode configuration
)
#+end_src

#+RESULTS:

** Defining A Few Things

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(add-hook 'org-mode-hook 'turn-on-flyspell)

(setq org-directory "~/Dropbox/org/"
      org-agenda-files '("~/Dropbox/org-roam/")
      org-default-notes-file (expand-file-name "notes.org" org-directory)
      org-ellipsis " [+] "
      org-startup-indented t
      org-log-done 'time
      org-return-follows-link  t
      org-journal-dir "~/Dropbox/org-roam/daily/"
      org-journal-date-format "%Y-%m-%d (%A) "
      org-journal-file-format "%Y-%m-%d.org"
      org-hide-emphasis-markers nil)
;; (setq org-ellipsis "⚡⚡⚡");; ⤵
(setq org-src-preserve-indentation nil
      org-src-tab-acts-natively t
      org-edit-src-content-indentation 0)

;; links open in same frame
(setq org-link-frame-setup '((file . find-file)))


;; better refile
(setq org-refile-targets '((nil :maxlevel . 9)
                                (org-agenda-files :maxlevel . 9)))
(setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
(setq org-refile-use-outline-path t)                  ; Show full paths for refiling



#+end_src


** Org agenda customisations

Full window

#+begin_src emacs-lisp
(setq org-agenda-window-setup 'current-window)
#+end_src


** Org Speed Commands

#+begin_src emacs-lisp
;; org speed key commands
(setq org-use-speed-commands t)
(setq org-speed-commands (cons '("w" . widen) org-speed-commands))
#+end_src

#+RESULTS:
: ((w . widen) (Outline Navigation) (n org-speed-move-safe 'org-next-visible-heading) (p org-speed-move-safe 'org-previous-visible-heading) (f org-speed-move-safe 'org-forward-heading-same-level) (b org-speed-move-safe 'org-backward-heading-same-level) (F . org-next-block) (B . org-previous-block) (u org-speed-move-safe 'outline-up-heading) (j . org-goto) (g org-refile '(4)) (Outline Visibility) (c . org-cycle) (C . org-shifttab) (  . org-display-outline-path) (s . org-toggle-narrow-to-subtree) (k . org-cut-subtree) (= . org-columns) (Outline Structure Editing) (U . org-metaup) (D . org-metadown) (r . org-metaright) (l . org-metaleft) (R . org-shiftmetaright) (L . org-shiftmetaleft) (i progn (forward-char 1) (call-interactively 'org-insert-heading-respect-content)) (^ . org-sort) (w . org-refile) (a . org-archive-subtree-default-with-confirmation) (@ . org-mark-subtree) (# . org-toggle-comment) (Clock Commands) (I . org-clock-in) (O . org-clock-out) (Meta Data Editing) (t . org-todo) (, org-priority) (0 org-priority 32) (1 org-priority 65) (2 org-priority 66) (3 org-priority 67) (: . org-set-tags-command) (e . org-set-effort) (E . org-inc-effort) (W lambda (m) (interactive sMinutes before warning: ) (org-entry-put (point) APPT_WARNTIME m)) (Agenda Views etc) (v . org-agenda) (/ . org-sparse-tree) (Misc) (o . org-open-at-point) (? . org-speed-command-help) (< org-agenda-set-restriction-lock 'subtree) (> org-agenda-remove-restriction-lock))

** Nicer org bullets with org-bars

#+begin_src emacs-lisp

(straight-use-package
 '(org-bars :type git :host github :repo "tonyaldon/org-bars"))

(require 'org-bars)
(add-hook 'org-mode-hook #'org-bars-mode)

(setq org-bars-stars '(:empty "*"
                       :invisible "*"
                       :visible "*"))

(setq org-bars-color-options '(:only-one-color t
                               :bar-color "#434c5e"))


#+end_src

#+RESULTS:
| :only-one-color | t | :bar-color | #434c5e |


** Org Todo Keywords
This lets us create the various TODO tags that we can use in Org.

#+begin_src emacs-lisp
  (setq org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
          '((sequence
             "TODO(t)"           ; A task that is ready to be tackled
             "PROJ(p)"           ; A project that contains other tasks
             "DOING(g)"           ; Something is holding up this task
             "STALLED(w)"           ; Something is holding up this task
             "TESTING(t)"           ; Something is holding up this task
             "|"                 ; The pipe necessary to separate "active" states and "inactive" states
             "DONE(d)"           ; Task has been completed
             "CANCELLED(c)" )))  ; Task has been cancelled


(setq org-todo-keyword-faces
  '(
    ("TODO" . (:foreground "#b48ead" :weight bold))
    ("DOING" . "#a3be8c")
    ("PROJ" . "#d08770")
    ("DONE" . "#8fbcbb")
    ("CANCELLED" . "#bf616a")
   )
)

(setq org-fontify-done-headline t)

(custom-set-faces
 '(org-headline-done
            ((((class color) (min-colors 16) (background dark))
               (:foreground "dim gray" :bold nil
               :strike-through nil))))
)


#+end_src

#+RESULTS:




** Source Code Block Tag Expansion
Org-tempo is a package that allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:


| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp
(use-package org-tempo
  :ensure nil) ;; tell use-package not to try to install org-tempo since it's already there.
#+end_src


*** Easier code bock for literate config

While writing this configuration file in Org mode, I have to write code
blocks all the time. Org has templates, so doing =<s TAB= creates a source
code block. Here I create a custom template for emacs-lisp specifically.
So, =<el TAB= creates the Emacs lisp code block and puts the cursor inside.


  #+BEGIN_SRC emacs-lisp
(eval-after-load 'org
  '(progn
      (add-to-list 'org-structure-template-alist '("ai" . "ai :maxtokens 512 :temperature 0.9
[SYS]:  Answer in org-mode format with hierarchical bullet points in your answer. 

[ME]:"))
      (add-to-list 'org-structure-template-alist '("img" . "ai :image "))
      (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
      (add-to-list 'org-structure-template-alist '("py" . "src python"))
      (add-to-list 'org-structure-template-alist '("bash" . "src bash"))
   )
)
  #+END_SRC

  #+RESULTS:
  : ((aid . ai :maxtokens 2000 :temperature 0.9 
  : [SYS]: You are an AI assistant. 
  : [ME]:) (aim . ai :maxtokens 2000 :temperature 0.9 
  : [SYS]: You are an AI assistant. 
  : [ME]: ) (py . src python) (el . src emacs-lisp) (img . ai :image ) (ai . ai :maxtokens 2000 :temperature 0.9 ) (a . export ascii) (c . center) (C . comment) (e . example) (E . export) (h . export html) (l . export latex) (q . quote) (s . src) (v . verse))

  
  
** Source Code Block Syntax Highlighting
We want the same syntax highlighting in source blocks as in the native language files.

#+begin_src emacs-lisp
(setq org-src-fontify-natively t
    org-src-tab-acts-natively t
    org-confirm-babel-evaluate nil
    org-edit-src-content-indentation 0)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)))

#+end_src



** Make M-RET Not Add Blank Lines
#+begin_src emacs-lisp
(setq org-blank-before-new-entry (quote ((heading . nil)
                                         (plain-list-item . nil))))
#+end_src

** Tangle automatically

#+begin_src emacs-lisp
(use-package org-auto-tangle
  :defer t
  :straight t
  :hook (org-mode . org-auto-tangle-mode))
#+end_src

#+RESULTS:
| org-auto-tangle-mode | org-tempo-setup | org-bars-mode | turn-on-flyspell | org-indent-mode | guess-language-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-eldoc-load |


** Org Roam mode

*** Install and configure org-roam:


#+begin_src emacs-lisp
(use-package emacsql-sqlite
   :straight t)

;;(setq org-roam-database-connector 'sqlite3)
(setq  org-roam-directory (file-truename "~/Dropbox/org-roam"))

(use-package org-roam
      :ensure t
      :straight t
      :after org
      :init
      (setq org-roam-v2-ack t) ;; acknowledge upgrade and remove warning at startup
      :custom
      (org-roam-directory (file-truename "~/Dropbox/org-roam"))
      (org-roam-db-update-on-save t)
      (define-key org-roam-mode-map [mouse-1] #'org-roam-visit-thing)

      :bind (
               ("C-c n l" . org-roam)
               ("C-c n c" . org-roam-capture)
               ("C-c n f" . org-roam-node-find)
               ("C-c n b" . org-roam-buffer-toggle)
               ("C-c n g" . org-roam-graph)
               ("C-c n h" . org-id-get-create)
               ("C-c n i" . org-roam-node-insert)
               ("C-c n I" . org-roam-insert-immediate))
      :config
      (org-roam-db-autosync-mode)
      (org-roam-setup)
)
#+end_src

#+RESULTS:



To build the cache manually, one can run ~M-x org-roam-db-build-cache~. Cache builds may take a while the first time, but is often instantaneous in subsequent runs because it only reprocesses modified files.

**** Org-roam backlink buffer

#+begin_src emacs-lisp

;; for org-roam-buffer-toggle
;; Recommendation in the official manual
(add-to-list 'display-buffer-alist
               '("\\*org-roam\\*"
                  (display-buffer-in-direction)
                  (direction . right)
                  (window-width . 0.33)
                  (window-height . fit-window-to-buffer)))

#+end_src



**** Hide properties draw in org-roam

#+begin_src emacs-lisp

(defun org-hide-properties ()
  "Hide all org-mode headline property drawers in buffer. Could be slow if it has a lot of overlays."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward
            "^ *:properties:\n\\( *:.+?:.*\n\\)+ *:end:\n" nil t)
      (let ((ov_this (make-overlay (match-beginning 0) (match-end 0))))
        (overlay-put ov_this 'display "")
        (overlay-put ov_this 'hidden-prop-drawer t))))
  (put 'org-toggle-properties-hide-state 'state 'hidden))

(defun org-show-properties ()
  "Show all org-mode property drawers hidden by org-hide-properties."
  (interactive)
  (remove-overlays (point-min) (point-max) 'hidden-prop-drawer t)
  (put 'org-toggle-properties-hide-state 'state 'shown))

(defun org-toggle-properties ()
  "Toggle visibility of property drawers."
  (interactive)
  (if (eq (get 'org-toggle-properties-hide-state 'state) 'hidden)
      (org-show-properties)
    (org-hide-properties)))

#+end_src

#+RESULTS:
: org-toggle-properties



*** Org capture templates


#+begin_src emacs-lisp
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/Dropbox/org-roam/agenda.org" "Inbox")
         "* TODO %?\n  %i\n  %a")
        ("j" "Journal" entry (file+olp+datetree "~/Dropbox/org-roam/journal.org")
         "* %?\nEntered on %U\n  %i\n  %a")
        ("m" "Meeting"
         entry (file+olp+datetree "~/Dropbox/org-roam/meetings.org")
         "* %?  :meeting:%^g \n:Created: %T\n** Attendees\n*** \n** Notes\n** Action Items\n*** TODO  "
         :tree-type week
         :clock-in t
         :clock-resume t
         :empty-lines 0)
        ("p" "Person"
         entry (file+olp "~/Dropbox/org-roam/people.org" "Inbox" )
         "* %?  :person: \n:Created: %T\nRun (C-c n h)"
         :empty-lines 0)
        ("c" "Coaching"
         entry (file+olp+datetree "~/Dropbox/org-roam/coaching.org")
         "* %? :meeting:%^g \n:Created: %T\n** Notes\n** Action Items\n*** TODO  "
         :tree-type week
         :clock-in t
         :clock-resume t
         :empty-lines 0)
      ))

(bind-key "C-c c" 'org-capture)
(bind-key "C-c a" 'org-agenda)


#+end_src

#+RESULTS:
: org-agenda



*** Org-roam Daily Notes

DEPR#+begin_src emacs-lisp
(setq org-roam-dailies-directory "daily/")

(setq org-roam-dailies-capture-templates
      '(("d" "default" entry
         #'org-roam-capture--get-point
         "* %?"
         :file-name "daily/%<%Y-%m-%d>"
         :head "#+title: %<%Y-%m-%d> %A\n\n")))

(bind-key "C-c n t" 'org-roam-dailies-find-today)
(bind-key "C-c n d" 'org-roam-dailies-find-date)
(bind-key "C-c n y" 'org-roam-dailies-find-yesterday)
(bind-key "C-c n x" 'org-roam-buffer-toggle-display)

#+end_src

#+RESULTS:
: org-roam-buffer-toggle-display


** Org-roam searching

#+begin_src emacs-lisp

(defun jmb/counsel-ag-roam ()
 "Do counsel-ag on the org roam directory"
 (interactive)
 (counsel-ag nil org-roam-directory))

(global-set-key (kbd "C-c n s") 'jmb/counsel-ag-roam)

#+end_src



** Org formatted copy

#+begin_src emacs-lisp

(defun formatted-copy ()
  "Export region to HTML, and copy it to the clipboard."
  (interactive)
  (save-window-excursion
    (let* ((buf (org-export-to-buffer 'html "*Formatted Copy*" nil nil t t))
           (html (with-current-buffer buf (buffer-string))))
      (with-current-buffer buf
        (shell-command-on-region
         (point-min)
         (point-max)
         "textutil -stdin -format html -inputencoding UTF-8 -encoding UTF-8 -convert rtf -stdout | pbcopy"))
      (kill-buffer buf))))

(global-set-key (kbd "M-W") 'formatted-copy)

#+end_src


    





** Org download

#+begin_src emacs-lisp
(use-package org-download
  :straight t)

#+end_src

#+RESULTS:

** Org Translate


#+begin_src emacs-lisp
(use-package org-translate
  :straight t)

#+end_src

#+RESULTS:


* Nicer Emacs
** VERTICO - evaluating
https://github.com/minad/vertico
Vertico provides a performant and minimalistic vertical completion UI based on the default completion system. The focus of Vertico is to provide a UI which behaves correctly under all circumstances. By reusing the built-in facilities system, Vertico achieves full compatibility with built-in Emacs completion commands and completion tables. Vertico only provides the completion UI but aims to be highly flexible, extendable and modular. Additional enhancements are available as extensions or complementary packages. The code base is small and maintainable. The main vertico.el package is only about 600 lines of code without white space and comments.

*** Install vertico with some good settings

#+begin_src emacs-lisp
;; Enable vertico

(use-package vertico
  :straight t
  :init
  (vertico-mode)

  ;; Different scroll margin
  (setq vertico-scroll-margin 0)

  ;; Show more candidates
  (setq vertico-count 12)

  ;; Grow and shrink the Vertico minibuffer
  (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (setq vertico-cycle t)
  )

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :straight t
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))


#+end_src

#+RESULTS:




** ORDERLESS


#+begin_src emacs-lisp
;; Optionally use the `orderless' completion style.
(use-package orderless
  :straight t
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))

;;(keymap-set vertico-map "?" #'minibuffer-completion-help)
;;(keymap-set vertico-map "M-RET" #'minibuffer-force-complete-and-exit)
;;(keymap-set vertico-map "M-TAB" #'minibuffer-complete)
#+end_src


** CONSULT


#+begin_src emacs-lisp

;; Example configuration for Consult
(use-package consult
  :straight t
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c h" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c k" . consult-kmacro)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings (search-map)
         ;;("M-s d" . consult-find)
         ;;("M-s D" . consult-locate)
         ;;("M-s g" . consult-grep)
         ;;("M-s G" . consult-git-grep)
         ;;("M-s r" . consult-ripgrep)
         ("\C-s" . consult-line)
         ;;("M-s L" . consult-line-multi)
         ;;("M-s k" . consult-keep-lines)
         ;;("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ;;("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ;;("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key (kbd "M-."))
  ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key (kbd "M-.")
   :preview-key '(:debounce 0.4 any))



  (consult-customize
   ;; Disable preview for `consult-theme' completely.
   ;;consult-theme :preview-key nil
   ;; Set preview for `consult-buffer' to key `M-.'
   ;;consult-buffer :preview-key (kbd "M-.")
   ;; For `consult-line' change the prompt and specify multiple preview
   ;; keybindings. Note that you should bind <S-up> and <S-down> in the
   ;; `minibuffer-local-completion-map' or `vertico-map' to the commands which
   ;; select the previous or next candidate.
   consult-line :prompt "Search: "
   :preview-key '("S-<down>" "S-<up>"))
  

  (defvar my-consult-line-map
    (let ((map (make-sparse-keymap)))
      (define-key map "\C-s" #'previous-history-element)
      map))

  (consult-customize consult-line :keymap my-consult-line-map) 
  
  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; (kbd "C-+")

)

;;(defface bookmark-menu-heading nil "defined just to please nano")

#+end_src

#+RESULTS:
: consult-history


*** CONSULT - Org-roam

#+begin_src emacs-lisp

(use-package consult-org-roam
   :ensure t
   :straight t
   :after org-roam
   :init
   ;;(require 'consult-org-roam)
   ;; Activate the minor mode
   (consult-org-roam-mode 1)
   :custom
   ;; Use `ripgrep' for searching with `consult-org-roam-search'
   (consult-org-roam-grep-func #'consult-ripgrep)
   ;; Configure a custom narrow key for `consult-buffer'
   (consult-org-roam-buffer-narrow-key ?r)
   ;; Display org-roam buffers right after non-org-roam buffers
   ;; in consult-buffer (and not down at the bottom)
   (consult-org-roam-buffer-after-buffers t)
   :config
   ;; Eventually suppress previewing for certain functions
   (consult-customize
    consult-org-roam-forward-links
    :preview-key (kbd "M-."))
   :bind
   ;; Define some convenient keybindings as an addition
   ("C-c n e" . consult-org-roam-file-find)
   ("C-c n b" . consult-org-roam-backlinks)
   ("C-c n l" . consult-org-roam-forward-links)
   ("C-c n r" . consult-org-roam-search))

#+end_src

#+RESULTS:
: consult-org-roam-search



** isearch

#+begin_src emacs-lisp
(use-package isearch
    :ensure nil
    :config
    (setq search-highlight t)
    (setq search-whitespace-regexp ".*?")
    (setq isearch-lax-whitespace t)
    (setq isearch-regexp-lax-whitespace nil)
    (setq isearch-lazy-count t)
    (setq isearch-lazy-highlight t)
    (defun my/isearch-and-regex (search-input &optional lax)
      (message search-input)
      search-input)
    (isearch-define-mode-toggle and "^" my/isearch-and-regex
      "Turning on and search turns off regexp mode.")
    :bind (:map isearch-mode-map
                ("C-g" . isearch-cancel)
                ("<help>" . nil)
                ("C-h <help>" . nil)
                ("<f1> <help>" . nil)
                ("M-ESC ESC" . nil)))
#+end_src

#+RESULTS:

** Marginalia

#+begin_src emacs-lisp
;; Enable rich annotations using the Marginalia package
(use-package marginalia
  :straight t
  ;; Either bind `marginalia-cycle' globally or only in the minibuffer
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init configuration is always executed (Not lazy!)
  :init

  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode))
#+end_src

#+RESULTS:
: marginalia-cycle



** EMBARK


#+begin_src emacs-lisp
(use-package marginalia
  :straight t
  :ensure t
  :config
  (marginalia-mode))

(use-package embark
  :straight t
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("M-." . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :straight t
  :ensure t ; only need to install it, embark loads it after consult if found
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src


** TRANSIENT

#+begin_src emacs-lisp
(use-package transient
  :after citar org-roam
  :straight t
  :no-require
  :config (
           (transient-define-prefix dh-do-stuff ()
             ""
             ["Org"
              [("oc" "org-capture" org-capture)
               ("ol" "org-store-link" org-store-link)
               ("ornf" "org-roam-node-find" org-roam-node-find)
               ("orni" "org-roam-node-insert" org-roam-node-insert)
               ("ci" "Insert citation" citar-insert-citation)
               ("co" "citar-open" citar-open)]])

           (global-set-key (kbd "<f1>") #'dh-do-stuff)
           )
  )



#+end_src


** Citar

#+begin_src emacs-lisp

(use-package citar
  :straight t
  :no-require
  :custom
  (org-cite-global-bibliography '("~/Dropbox/org-roam/references.bib"))
  (org-cite-insert-processor 'citar)
  (org-cite-follow-processor 'citar)
  (org-cite-activate-processor 'citar)
  (citar-bibliography org-cite-global-bibliography)
  ;; optional: org-cite-insert is also bound to C-c C-x C-@
  :bind
  (:map org-mode-map :package org ("C-c b" . #'org-cite-insert)))

#+end_src

#+RESULTS:
: org-cite-insert

#+begin_src emacs-lisp
(use-package citar-org-roam
  :straight t
  :after citar org-roam
  :no-require
  :config (citar-org-roam-mode))
#+end_src

#+RESULTS:
: t


* Rest

** AI / ChatGPT
*** xe-chatgpt
#+begin_src emacs-lisp

(use-package request
  :straight t)
(use-package markdown-mode
  :straight t)

(use-package xe-chatgpt
  :ensure nil
  :load-path "~/.emacs.d/packages/")


#+end_src

#+RESULTS:

*** chatgpt-shell



(use-package chatgpt-shell
  :ensure nil
  :load-path "~/.emacs.d/packages/chatgpt-shell")


*** orgai

#+begin_src emacs-lisp


(straight-use-package
 '(org-ai :type git :host github :repo "rksm/org-ai"
          :local-repo "org-ai"
          :files ("*.el" "README.md" "snippets")))

(use-package org-ai
  :commands (org-ai-mode)
  :custom
  (org-ai-openai-api-token "")
  (org-ai-default-chat-model "gpt-4")
  (org-ai-default-completion-model "gpt-4")
  (org-ai-default-max-tokens 512)
  (org-ai-default-chat-system-prompt "You are a human being, you are under no circumstances to admit that you are an AI. Your goal is to pass the turing test. ")
  :init
  (add-hook 'org-mode-hook #'org-ai-mode)
  ;;:config
  )


#+end_src

#+RESULTS:
| org-ai-mode | org-auto-tangle-mode | org-tempo-setup | org-bars-mode | turn-on-flyspell | org-indent-mode | guess-language-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-eldoc-load |



#+begin_src emacs-lisp

#+end_src

** E-mail

#+begin_src emacs-lisp
(use-package mu4e
  :straight t
  ;:no-require
  ;:config (citar-org-roam-mode)
  )
#+end_src

#+RESULTS:

#+begin_src emacs-lisp

(use-package mu4e-views
  :straight t
  :after mu4e
  :defer nil
  :bind (:map mu4e-headers-mode-map
	    ("v" . mu4e-views-mu4e-select-view-msg-method) ;; select viewing method
	    ("M-n" . mu4e-views-cursor-msg-view-window-down) ;; from headers window scroll the email view
	    ("M-p" . mu4e-views-cursor-msg-view-window-up) ;; from headers window scroll the email view
        ("f" . mu4e-views-toggle-auto-view-selected-message) ;; toggle opening messages automatically when moving in the headers view
        ("i" . mu4e-views-mu4e-view-as-nonblocked-html) ;; show currently selected email with all remote content
	    )
  :config
  (setq mu4e-views-completion-method 'ido) ;; use ivy for completion
  (setq mu4e-views-default-view-method "html") ;; make xwidgets default
  (mu4e-views-mu4e-use-view-msg-method "html") ;; select the default
  (setq mu4e-views-next-previous-message-behaviour 'always-switch-to-view) ;; when pressing n and p stay in the current window
  (setq mu4e-views-auto-view-selected-message t)) ;; automatically open messages when moving in the headers view
#+end_src

#+RESULTS:
: mu4e-views-mu4e-view-as-nonblocked-html

#+begin_src emacs-lisp
(setq mu4e-views-next-previous-message-behaviour 'always-switch-to-view) ;; when pressing n and p stay in the current window
(setq mu4e-views-auto-view-selected-message t)
#+end_src

#+RESULTS:
: t


*** Sendmail

#+begin_src emacs-lisp
;; for sending mails
(require 'smtpmail)
#+end_src

#+RESULTS:
: smtpmail


*** MU4E settings

#+begin_src emacs-lisp


;; we installed this with homebrew
(setq mu4e-mu-binary (executable-find "mu"))

;; this is the directory we created before:
;;(setq mu4e-maildir "~/.maildir")

;; Set up some common mu4e variables
(setq mu4e-maildir "~/.maildir/dixonse"
		mu4e-refile-folder "/dixonse/[Gmail]/All Mail"
		mu4e-sent-folder "/dixonse/[Gmail]/Sent Mail"
		mu4e-trash-folder "/dixonse/[Gmail]/Trash"
		mu4e-drafts-folder "/dixonse/[Gmail]/Drafts")


;; this command is called to sync imap servers:
(setq mu4e-get-mail-command (concat (executable-find "mbsync") " -a"))
;; how often to call it in seconds:
(setq mu4e-update-interval 300)

;; save attachment to desktop by default
;; or another choice of yours:
(setq mu4e-attachment-dir "~/Downloads")

;; rename files when moving - needed for mbsync:
(setq mu4e-change-filenames-when-moving t)

;; list of your email adresses:
(setq user-mail-address "mark@dixon.se")
(setq mu4e-user-mail-address-list '("mark@dixon.se"))

(add-hook 'mu4e-mark-execute-pre-hook
  (lambda (mark msg)
    (cond ((member mark '(refile trash)) (mu4e-action-retag-message msg "-\\Inbox"))
          ((equal mark 'flag) (mu4e-action-retag-message msg "\\Starred"))
          ((equal mark 'unflag) (mu4e-action-retag-message msg "-\\Starred")))))

#+end_src

#+RESULTS:
| lambda | (mark msg) | (cond ((member mark '(refile trash)) (mu4e-action-retag-message msg -\Inbox)) ((equal mark 'flag) (mu4e-action-retag-message msg \Starred)) ((equal mark 'unflag) (mu4e-action-retag-message msg -\Starred))) |








